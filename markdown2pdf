#!/usr/bin/env ruby
#encoding: utf-8

full = ARGV[0]
baseless = File.basename(full, ".*")
base = File.basename(full)
dir = ENV["HOME"] + "/tmp"

`cp "#{full}" #{dir}`
Dir.chdir dir

if base.sub(baseless, "") == ".tex"
  `pdflatex "#{baseless}"`
  `cp "#{baseless}.pdf" /u/gawrisch/public_html` if File.exists? "/u/gawrisch/public_html"
  exit
end

wordcount = `cat #{base} | wc -w`.strip
lines = File.readlines(base)
lines = lines.reject { |x| x =~ /^%/ } # lines beginning with % are comments

# find_all deprecated?
layout = (lines.find_all { |x| x =~ /^Layout: / }.first or "").chop.sub(/^Layout: /, "").strip
# Bsp: "times doublespacing indent titlepage toc bibliography"
# TODO vll umbennen zu "Options"/"Optionen"

# determine if there are header fields.
unless lines[0] =~ /^[a-zA-Z]+:\s*\S+.*/
  lines = lines.insert(0, "\n")
end

lines = lines.insert(0,
  "LatexInput: tex/packages\n",
  "LatexInput: tex/default-values\n")
lines = lines.insert(lines.index("\n"),
#  "QuotesLanguage: german\n",
  "Bibtex: #{baseless}\n",
  "BaseHeaderLevel: 3\n",
  "LatexInput: tex/begin\n",
  "LatexFooter: tex/footer\n")

# strip header
(0..lines.index("\n")).each { |i| lines[i] = lines[i].gsub(/  +/, " ").strip + "\n" }

# remove bib
first_bib_line = lines.index "# Literatur\n"
first_bib_line ||= lines.length

# + 2 wegen "# Literatur" soll nicht mehr drinstehen
bib_text = (lines[(first_bib_line + 2)...lines.length] or []).join
all_text = lines[0...first_bib_line].join

# TODO Spaces für Listen irgendwie ignorieren
start = all_text.index "  "
while start
  #stop1 = all_text.index "  ", start + 2
  #stop2 = all_text.index "\n", start + 2
  #stop = [stop1, stop2].min
  stop = all_text.index "  ", start + 2
  break unless stop

  str = all_text[start..stop + 1]
  str = str.gsub("φ", "varphi").
            gsub("π", "pi").
            gsub("ε", "varepsilon").
            gsub("∂", "delta").
            gsub("µ", "mu").
            gsub("λ", "lambda").
            gsub("∞", "infty").
            gsub("ξ", "xi").
            gsub("τ", "tau").
            gsub("σ", "sigma").
            gsub("<->", "leftrightarrow").
            gsub("|--", "vdash").
            gsub("<-->", "enspace leftrightarrow enspace").
            gsub("-->", "enspace rightarrow enspace").
            gsub("->", "rightarrow").
            gsub("<=>", "Leftrightarrow").
            gsub("<==>", "quad Leftrightarrow quad").
            gsub("=>", "Rightarrow").
            gsub("≤", "leq").
            gsub("<=", "leq").
            gsub("≥", "geq").
            gsub(">=", "geq").
            gsub("!=", "neq").
            gsub("+-", "pm").
            gsub("±", "pm").
            gsub("·", "cdot").
            gsub("^-1", "^{-1}").
            gsub("Lös", "Los").
            gsub("lim_{", "displaystyle lim_{").
            gsub("´", " textrm'")

  # TODO Auch EOL als schließendes "  " zulassen
  # TODO /\W{.*?}/ -> \{...\} für Mengen.
  #
  puts all_text[start]
  puts "start #{all_text[start - 1]}, stop #{all_text[stop + 2]}"

  if all_text[start - 1] == 10 && all_text[stop + 2] == 10
    str = "beginalign \\\\(" + str.gsub("  ", "").gsub("\\\\", "\\\\\\\\\\\\\\\\") + "\\\\) endalign" # hui.
  else
    str = " \\\\(" + str.gsub("  ", "").gsub("\\\\", "\\\\\\\\\\\\\\\\") + "\\\\) " # hui.
  end
  # TODO nicht, wenn \ davor steht
  str = str.gsub /([a-zA-Z]{2,})/, "\\\\\\&" # TODO das hier von Options abhängig machen
  str.scan(/text{(.*?)}/).flatten.
      each { |match| str.gsub! "text{#{match}}", "text{#{match.gsub("\\", "")}}"}
  all_text[start..stop + 1] = str

  start = all_text.index "  ", start
end

all_text = all_text.gsub(" [^", "[^")

file = File.new(base, "w")
file.write(all_text)
file.close

file = File.new(baseless + ".bib", "w")
file.write(bib_text)
file.close

`multimarkdown --to=latex --output="#{baseless}.tex" "#{baseless}.md"`

lines = File.readlines(baseless + ".tex")

layout.split(" ").each do |str|
  lines.insert(0, "\\newcommand{\\layout#{str}}{}\n")
end

lines.insert(0, "\\newcommand{\\wordcount}{#{wordcount}}\n")

(0...lines.length).each do |i|
  # replace in lines that start with \def: \textbackslash{}, \{, \}
  if lines[i] =~ /^\\def.*$/ or lines[i] =~ /^\\.*$/
    lines[i] = lines[i].gsub(/\\textbackslash\{\}/, "\\").
                        gsub("--", "-").
                        gsub(/\\\{/, "{").
                        gsub(/\\\}/, "}")
  end

  # replace strange chars
  lines[i] = lines[i].gsub " ", " " # <A-Space>, &nbsp;
  lines[i] = lines[i].gsub " ", " " # aus MacWord-PDF kopiert
  lines[i] = lines[i].gsub "ü", "ü"
  lines[i] = lines[i].gsub "ö", "ö"
  lines[i] = lines[i].gsub "ä", "ä"

  # workaround ?``: just replace all closing quotes.
  lines[i] = lines[i].gsub "``", "“"
  # nach den doppelten auch die einfachen
  lines[i] = lines[i].gsub "`", "{‘}"
  # ellipsis
  lines[i] = lines[i].gsub "...", "\\dots"
end

all_text = lines.join
# never indent first line
all_text = all_text.sub "\\input{tex/begin}\n", "\\input{tex/begin}\n\\noindent "
all_text = all_text.gsub("- $", "-$").
                    gsub("$ -", "$-")

all_text = all_text.gsub "\\\\\\\\", "\\\\\\"

# no number for Einleitung und Schluss/Fazit
all_text = all_text.sub "\\noindent \\section{Einleitung}", "\\phantomsection\n\\section*{Einleitung}\n\\addcontentsline{toc}{section}{Einleitung}"
all_text = all_text.sub "\\section{Schluss}", "\\phantomsection\n\\section*{Schluss}\n\\addcontentsline{toc}{section}{Schluss}"
all_text = all_text.sub "\\section{Fazit}", "\\phantomsection\n\\section*{Fazit}\n\\addcontentsline{toc}{section}{Fazit}"
all_text = all_text.gsub "\\end{quote}\n", "\\end{quote}"

all_text = all_text.gsub "begin{enumerate}", "begin{compactenum}"
#all_text = all_text.gsub "begin{enumerate}", "begin{compactenum}[\\; a)]" # TODO if logik
all_text = all_text.gsub "end{enumerate}", "end{compactenum}"
all_text = all_text.gsub "itemize", "compactitem"
all_text.gsub! "\\[", "\\begin{align*}\n"
all_text.gsub! "\\]", "\n\\end{align*}"

all_text.gsub!("\\beginalign $", "\\vspace{-2.3em}\\begin{align*}\n")
all_text.gsub!("$ \\endalign", "\n\\end{align*}\\vspace{-2.4em}")

# "Bla.. " ersetzen
#all_text = all_text.gsub /(?<!\.)\.\.\s/, ".\\quad " # muss Lösung ohne lookbehind finden. vll ... -> äöü, .. -> quad, äöü -> ...
# "$Bla..$ " ersetzen
#all_text = all_text.gsub /(?<!\.)\.\.\$\s/, ".$\\quad "
all_text = all_text.gsub("...", "#BLATEXT#").
                    gsub(".. ", ".\\quad ").
                    gsub("..$ ", "$.\\quad ").
                    gsub(":: ", ":\\quad ").
                    gsub("::$ ", "$:\\quad ").
                    gsub(",, ", ",\\; ").
                    gsub("#BLATEXT#", "...")

file = File.new baseless + ".tex", "w"
file.write all_text
file.close

`pdflatex "#{baseless}"`

`cp "#{baseless}.pdf" /u/gawrisch/public_html` if File.exists? "/u/gawrisch/public_html"

# TODO Feld "HelperFiles: ", wo man dateinamen angibt, die im selben pfad liegen, die irgendwie strukturierte bibliographie-daten enthalten, die in eine .bib(?)-Datei geschrieben werden
